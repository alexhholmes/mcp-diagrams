"""MCP server implementation for diagram generation."""

from diagrams import *
import tempfile
import os
from pathlib import Path
from mcp.server import Server, NotificationOptions
from mcp.server.models import InitializationOptions
import mcp.types as types
import mcp.server.stdio

# Import diagrams module and add all its contents to namespace (for exec in
# render_diagram). This prevents any overly permissive imports in the code.
namespace = {}
diagrams = __import__('diagrams')
diagrams_contents = {name: getattr(diagrams, name) for name in dir(diagrams)}
namespace.update(diagrams_contents)
for submodule in ['k8s', 'aws', 'azure', 'gcp', 'onprem', 'saas', 'programming', 'generic']:
    full_module = f'diagrams.{submodule}'
    module = __import__(full_module, fromlist=['*'])
    module_contents = {name: getattr(module, name) for name in dir(module) if
                       not name.startswith('_')}
    namespace.update(module_contents)

async def render_diagram(args: dict) -> list[types.TextContent]:
    """Render a diagram from raw Python code."""
    code = args.get("code")
    if not code:
        raise ValueError("Code is required")

    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # Store current directory and change to temp dir for SVG output
            current_dir = os.getcwd()
            os.chdir(temp_dir)

            try:
                exec(code, namespace)
            finally:
                os.chdir(current_dir)

            # Check for generated SVG files
            svg_files = list(Path(temp_dir).glob("*.svg"))
            if not svg_files:
                return [types.TextContent(
                    type="text",
                    text=f"No diagram was generated.\n\nDiagrams code "
                         f"generated by client:\n```python\
                    n{code}\n```")]

            with open(svg_files[0], "r") as f:
                svg_content = f.read()

            return [
                types.TextContent(
                    type="text",
                    text=svg_content
                )
            ]

        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"Error generating diagram: {str(e)}\n\nMake sure your code follows the Diagrams library syntax."
            )]

async def serve():
    server = Server("mcp-diagrams")

    @server.list_tools()
    async def handle_list_tools() -> list[types.Tool]:
        """List available diagram generation tools."""
        return [
            types.Tool(
                name="render-diagram",
                description="Creates a diagram using Python Diagrams code",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "Raw Python code using the Diagrams library to generate a diagram"
                        }
                    },
                    "required": ["code"]
                }
            ),
        ]

    @server.call_tool()
    async def handle_call_tool(
            name: str,
            arguments: dict | None
    ) -> list[types.TextContent]:
        """Handle tool execution for diagram generation."""
        if not arguments:
            raise ValueError("Arguments required")

        if name == "render-diagram":
            return await render_diagram(arguments)

        raise ValueError(f"Unknown tool: {name}")

    """Run the diagram generator server."""
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="diagrams",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                )
            )
        )
